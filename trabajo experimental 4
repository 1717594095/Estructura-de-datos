//Encuentro de vuelos baratos a partir de una base de datos (se creará una base de datos
//ficticia usando un archivo de texto o directamente una estructura que la simule dentro
//del mismo programa que desarrollará) 


import java.util.*;


// clase principal del programa
public class VuelosBaratos {
    
    //clase intterna: arista
    // representa un vuelo entre dos ciudades con un precio

    static class Vuelo {
        String destino;
        int precio;

        public Vuelo(String destino, int precio)  {
            this.destino = destino;
            this.precio = precio;
        }
    }


    //clase grafo
    //esta estructura guarda las conexiones entre las ciudades
    static class GrafoVuelos {
        private Map<String, List<Vuelo>> grafo = new HashMap<>();

        //agregar una ciudad al grafo
        public void agregarCiudad(String ciudad)  {
            grafo.putIfAbsent(ciudad, new ArrayList<>());
        }

        // agregar un vuelo 
        public void agregarVuelo(String origen, String destino, int precio)  {
            agregarCiudad(origen);
            agregarCiudad(destino);


            grafo.get(origen).add(new Vuelo(destino, precio));
            // si los vuelos son bidireccionales, agregar también el inverso:
            grafo.get(destino).add(new Vuelo(origen, precio));
        }

        // mostrar la base de datos de vuelos
        public void mostrarVuelos() {
            System.out.println(" *** BASE DE VUELOS ***");
            for (String ciudad : grafo.keySet())  {
                System.out.println( ciudad +  " ");
                for (Vuelo v: grafo.get(ciudad))   {
                    System.out.println(v.destino + " ($" + v.precio + ")");
                }
                System.out.println();
            }
            System.out.println();
        }

        // algoritmo de Dijkstra 
        public void vueloMasBarato (String origen, String destino )  {

            //cola de prioridad ordenada por precio
            PriorityQueue<Map.Entry<String, Integer>> cola = new PriorityQueue<>(Map.Entry.comparingByValue());
            Map<String, Integer> precios = new HashMap<>();
            Map<String, String> predecesor = new HashMap<>();
            Set<String> visitados  = new HashSet<>();

            // inicilaización de precios
            for (String ciudad : grafo.keySet())   {
                precios.put(ciudad, Integer.MAX_VALUE);
            }
            precios.put(origen, 0);
            cola.offer(Map.entry(origen, 0));

            // bucle principal
            while (!cola.isEmpty())  {
                String actual = cola.poll().getKey();
                if (!visitados.add(actual)) continue;

                // recorre todos los vuelos disponibles
                for (Vuelo vuelo : grafo.get(actual))  {
                    int nuevoPrecio = precios.get(actual) + vuelo.precio;
                    if (nuevoPrecio < precios.get(vuelo.destino)) {
                        precios.put(vuelo.destino, nuevoPrecio);
                        predecesor.put(vuelo.destino, actual);
                        cola.offer(Map.entry(vuelo.destino, nuevoPrecio));
                    }
                }
            }
            
            // mostra resultados
            System.out.println("**RESULTADO DE BÚSQUEDA DE VUELO ****");
            if (precios.get(destino) == Integer.MAX_VALUE)  {
                System.out.println("No existe ruta disponible entre" + origen + " y " + destino);
            }else {
                System.out.println("Precio mínimo de vuelo: $" + precios.get(destino));
                System.out.println("Ruta: ");
                mostrarRuta(predecesor, origen, destino);
                System.out.println("\n");
            }
        }

        // función auxiliar para reconstruir la ruta
        private void mostrarRuta(Map<String, String> predecesor, String origen, String destino )  {
            if (!destino.equals(origen))  {
                mostrarRuta(predecesor, origen, predecesor.get(destino));
            }
            System.out.println(destino + " ");
        }
    }
    // método principla
    public static void main(String[] args) {

        // crear grafo 
        GrafoVuelos vuelos = new GrafoVuelos();

        // agregar ciudades
        vuelos.agregarCiudad( "Quito");
        vuelos.agregarCiudad( "Cuenca");
        vuelos.agregarCiudad("Ambato");
        vuelos.agregarCiudad( "Manta");
        vuelos.agregarCiudad("Loja");
        
        
        // agregar vuelos con sus precios 
        vuelos.agregarVuelo( "Quito", "Guayaquil", 90);
        vuelos.agregarVuelo( "Quito", "Cuenca", 70);
        vuelos.agregarVuelo( "Guayaquil", "Manta", 60);
        vuelos.agregarVuelo( "Cuenca", "Loja", 50);
        vuelos.agregarVuelo( "Ambato", "Manta", 90);

        // mostrar todos los vuelos disponibles
        vuelos.mostrarVuelos();

        // buscar el vuelo más barato entre dos ciudades
        vuelos.vueloMasBarato("Quito", "Manta");
        vuelos.vueloMasBarato("Guayaquil", "Loja");
    }
}
