using System;

class Nodo
{
    public int Valor;
    public Nodo Izquierdo;
    public Nodo Derecho;

    public Nodo(int valor)
    {
        Valor = valor;
        Izquierdo = null;
        Derecho = null;
    }
}

class ArbolBinario
{
    public Nodo Raiz;

    public void Insertar(int valor)
    {
        Raiz = InsertarRecursivo(Raiz, valor);
    }

    private Nodo InsertarRecursivo(Nodo raiz, int valor)
    {
        if (raiz == null)
        {
            raiz = new Nodo(valor);
            return raiz;
        }
        if (valor < raiz.Valor)
            raiz.Izquierdo = InsertarRecursivo(raiz.Izquierdo, valor);
        else if (valor > raiz.Valor)
            raiz.Derecho = InsertarRecursivo(raiz.Derecho, valor);
        return raiz;
    }

    public void InOrden(Nodo raiz)
    {
        if (raiz != null)
        {
            InOrden(raiz.Izquierdo);
            Console.Write(raiz.Valor + " ");
            InOrden(raiz.Derecho);
        }
    }

    public void PreOrden(Nodo raiz)
    {
        if (raiz != null)
        {
            Console.Write(raiz.Valor + " ");
            PreOrden(raiz.Izquierdo);
            PreOrden(raiz.Derecho);
        }
    }

    public void PostOrden(Nodo raiz)
    {
        if (raiz != null)
        {
            PostOrden(raiz.Izquierdo);
            PostOrden(raiz.Derecho);
            Console.Write(raiz.Valor + " ");
        }
    }

    public bool Buscar(Nodo raiz, int valor)
    {
        if (raiz == null) return false;
        if (raiz.Valor == valor) return true;
        return valor < raiz.Valor ? Buscar(raiz.Izquierdo, valor) : Buscar(raiz.Derecho, valor);
    }

    public Nodo Eliminar(Nodo raiz, int valor)
    {
        if (raiz == null) return raiz;

        if (valor < raiz.Valor)
            raiz.Izquierdo = Eliminar(raiz.Izquierdo, valor);
        else if (valor > raiz.Valor)
            raiz.Derecho = Eliminar(raiz.Derecho, valor);
        else
        {
            if (raiz.Izquierdo == null) return raiz.Derecho;
            else if (raiz.Derecho == null) return raiz.Izquierdo;

            raiz.Valor = MinimoValor(raiz.Derecho);
            raiz.Derecho = Eliminar(raiz.Derecho, raiz.Valor);
        }
        return raiz;
    }

    private int MinimoValor(Nodo raiz)
    {
        int minv = raiz.Valor;
        while (raiz.Izquierdo != null)
        {
            minv = raiz.Izquierdo.Valor;
            raiz = raiz.Izquierdo;
        }
        return minv;
    }
}

class Program
{
    static void Main(string[] args)
    {
        ArbolBinario arbol = new ArbolBinario();
        int opcion, valor;

        do
        {
            Console.WriteLine("\n--- MENU ÁRBOL BINARIO ---");
            Console.WriteLine("1. Insertar nodo");
            Console.WriteLine("2. Recorrido Inorden");
            Console.WriteLine("3. Recorrido Preorden");
            Console.WriteLine("4. Recorrido Postorden");
            Console.WriteLine("5. Buscar elemento");
            Console.WriteLine("6. Eliminar nodo");
            Console.WriteLine("0. Salir");
            Console.Write("Seleccione una opción: ");
            opcion = int.Parse(Console.ReadLine());

            switch (opcion)
            {
                case 1:
                    Console.Write("Ingrese valor: ");
                    valor = int.Parse(Console.ReadLine());
                    arbol.Insertar(valor);
                    break;
                case 2:
                    Console.Write("Inorden: ");
                    arbol.InOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case 3:
                    Console.Write("Preorden: ");
                    arbol.PreOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case 4:
                    Console.Write("Postorden: ");
                    arbol.PostOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case 5:
                    Console.Write("Valor a buscar: ");
                    valor = int.Parse(Console.ReadLine());
                    Console.WriteLine(arbol.Buscar(arbol.Raiz, valor) ? "Encontrado" : "No encontrado");
                    break;
                case 6:
                    Console.Write("Valor a eliminar: ");
                    valor = int.Parse(Console.ReadLine());
                    arbol.Raiz = arbol.Eliminar(arbol.Raiz, valor);
                    Console.WriteLine("Nodo eliminado (si existía).");
                    break;
            }

        } while (opcion != 0);
    }
}

